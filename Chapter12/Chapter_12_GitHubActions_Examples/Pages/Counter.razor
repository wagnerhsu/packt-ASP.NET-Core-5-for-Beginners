@using Microsoft.Extensions.Logging;
@inject ApplicationStorage<LocalStorageProvider> LocalState
@inject ApplicationStorage<SessionStorageProvider> SessionState
@inject ILogger<Counter> Logger
@page "/counter"

<h1>Counter</h1>

<table class="table">
    <thead>
        <tr><td></td><td>Count</td></tr>
    </thead>
    <tbody>
        <tr><td>Page   </td><td>@currentCount</td></tr>
        <tr><td>Session</td><td>@currentSessionCount</td></tr>
        <tr><td>Local  </td><td>@currentLocalCount</td></tr>
    </tbody>
</table>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private int currentLocalCount = 0;
    private int currentSessionCount = 0;

    protected override async Task OnInitializedAsync()
    {
        currentLocalCount = await GetCountFromStorage(LocalState);
        currentSessionCount = await GetCountFromStorage(SessionState);
    }

    private async void IncrementCount()
    {
        currentCount++;

        currentSessionCount = await IncrementCountInStorage(SessionState);
        currentLocalCount = await IncrementCountInStorage(LocalState);

        StateHasChanged();
    }

    private async Task<int> GetCountFromStorage<T>(ApplicationStorage<T> provider) where T : IStorageProvider
    {
        var state = await provider.GetUserState();

        return state.Counter;
    }

    private async Task<int> IncrementCountInStorage<T>(ApplicationStorage<T> provider) where T : IStorageProvider
    {
        var state = await provider.GetUserState();
        state.Counter++;
        await provider.SetUserState(state);

        return state.Counter;
    }
}