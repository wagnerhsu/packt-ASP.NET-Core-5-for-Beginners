@page "/main"
@using BlazorServer.Web.Data
@using BlazorServer.Web.Pages.Spots
@inject PlaceService _placeService
@inject AppState _appState
@implements IDisposable

@if (Places == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-8">
                <h3>Featured Tourist Spot</h3>
                <ViewTouristSpot Place="Place" />
            </div>
            <div class="col-4">
                <div class="row">
                    <h3>What's New?</h3>
                    <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">@_placeService.NewPlaceName</h5>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <h3>Top Places</h3>
                    <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <ul>
                                @foreach (var place in Places)
                                {
                                    <li>
                                        <a href="javascript:void(0)"
                                           @onclick="(() => ViewDetails(place.Id))">
                                            @place.Name
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Place> Places;
    public Place Place { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _placeService.InitializeSignalR();

        Places = await _placeService.GetPlacesAsync();
        Place = Places.FirstOrDefault();

        _placeService.NewPlaceName = Place.Name;
        _placeService.NewPlaceId = Place.Id;

        _placeService.OnChange += HandleNewPlaceAdded;
        _appState.OnChange += HandleStateChange;
    }

    private async void HandleNewPlaceAdded()
    {
        Places = await _placeService.GetPlacesAsync();
        StateHasChanged();
    }

    private async void HandleStateChange()
    {
        Places = await _placeService.GetPlacesAsync();
        Place = _appState.Place;

        if (_placeService.NewPlaceId == _appState.Place.Id)
        {
            _placeService.NewPlaceName = _appState.Place.Name;
        }

        StateHasChanged();
    }

    private void ViewDetails(int id)
    {
        Place = Places.FirstOrDefault(o => o.Id.Equals(id));
    }

    public void Dispose()
    {
        _appState.OnChange -= StateHasChanged;
        _placeService.OnChange -= StateHasChanged;
    }
}

